extends templates/page.pug

block body
  main#docs
    section
      h1 pistachio API docs
      p The pistachio API is organized around REST. The API accepts JSON request bodies, returns JSON responses, and uses standard HTTP verbs and response codes. Currently no endpoints require authentication.
      p By accessing the API you agree to #[a(href='/#terms') the terms] on the homepage.
    section
      p The API endpoint is #[code https://api.pistachio.ai]
    section
      h2 Objects
      .object
        h3#node Nodes
        p.description Nodes represent objects like ingredients or recipes in pistachio’s knowledge base. The line is often blurry: #[em mayonnaise] might be an ingredient in a recipe, or a recipe unto itself, so all real-world items—and classes of items such as #[em fruits]—are accessible as nodes.
        h4 Endpoint
        p #[code #[span.method GET] /nodes/#[span.param :id]]
        h4 URL Params
        table
          tr
            td #[code id]
            td #[span.attributes String, required]
        h4 Success Response
        pre.
          { 
            "status": "ok",
            "data": {
              ... // a node
            } 
          }
        h4 The Node object
        table
          tr
            th Attributes
            th Type
            th Description
          tr
            td #[code id]
            td #[code String]
            td The node’s unique id
          tr
            td #[code meta]
            td
              code Object[]
            td The node’s meta properties
          tr
            td
              code meta[].name
            td
              code String
            td The name of the meta property
          tr
            td
              code meta[].kind
            td
              code ENUM ["Text"|"Array"|"Number"|"Link"]
            td The type of the meta property;
              code 
          tr
            td
              code meta[].value
            td
              code String|Number|Object
            td The value of the meta property. The type of the value is given by the meta object’s #[code kind] property. Some meta properties, like "Wikipedia Link" appear on most nodes. Others, like "Boiling Point", only make sense for a few nodes. The list of available meta properties changes as the knowledge base expands, though I‘ll try not to change the shape of any given property. I‘m working on an endpoint and documentation for all available meta properties.
          tr
            td #[code name]
            td #[code String]
            td The node’s common name.
          tr
            td #[code synonyms]
            td
              code String[]
            td Synonyms of the node
            
        h4 Example Requests
        .example-requests
          pre.
            curl https://api.pistachio.ai/nodes/5f0dc26396cace915e4e739d
          pre.
            fetch("https://api.pistachio.ai/nodes/5f0dc26396cace915e4e739d")
              .then(response => response.json())
              .then(data => console.log(data));
        h4 Error Responses
        p #[code 404 NOT FOUND]
        pre.
          {
            "error": {
              "status": "error",
              "message": "invalid id"
            }
          }
    section
      h2 Methods
      .object
        h3#search Search
        p.description Search #[a(href='#node') nodes] using the #[code name] and #[code synonyms] attributes.
        h4 Endpoints
        p #[code #[span.method GET] /search/#[span.param :query]]
        h4 URL Params
        table
          tr
            td #[code query]
            td #[span.attributes String, required]
        h4 Success Response
        pre.
          {
            status: "ok",
            data: [
              { 
                "score": 4.2786,
                "node": {
                  ... // a node
                } 
              },
              ...
            ]
          }
        p The data object is an array of matches where each match contains a score and a #[a(href='#node') node]. The score can be used to rank results both within a single query, and across queries. Scoring is loosely based on #[a(href='https://www.elastic.co/guide/en/elasticsearch/guide/current/practical-scoring-function.html') Lucene’s practical scoring function], though pistachio’s scoring algorithm also considers additional factors, such as each node’s postion in the knowledge graph and how common it is.
            
        h4 Example Requests
        .example-requests
          pre.
            curl https://api.pistachio.ai/search/pistachio
          pre.
            fetch("https://api.pistachio.ai/search/pistachio")
              .then(response => response.json())
              .then(data => console.log(data));
